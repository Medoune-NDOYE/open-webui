function getModelData() {

	const session = pfcGetCurrentSession();
	const model = session.GetActiveModel();

	function extractObjectProps(obj) {
		const result = {};
		for (const key in obj) {
			const value = obj[key];
			if (typeof value !== "function" && (value === null || ["string", "number", "boolean"].includes(typeof value))) {
				result[key] = value;
			}
		}
		return result;
	}

	function getFeaturesFromModel(model) {
		if (!model) return [];

		return model.ListItems(pfcModelItemType.ITEM_FEATURE).map(f => {

			const featureInfos = extractObjectProps(f)

			if (f.FeatType === pfcFeatureType.FEATTYPE_COMPONENT) {

				featureInfos.componentName = session.GetModelFromDescr(f.ModelDescr).FullName;
				featureInfos.componentType = session.GetModelFromDescr(f.ModelDescr).Type?.string?.()?.replace("MDL_", "");

				try {
					const constraintsObj = f.GetConstraints();
					const constraints = [];

					for (let i = 0; i < constraintsObj.length; i++) {
						const constraint = constraintsObj[i];
						const constraintType = constraint.Type?.string?.()?.replace("ASM_CONSTRAINT_", "") ?? null;

						const constraintInfo = { type: constraintType };

						if (constraintType !== "DEF_PLACEMENT") {
							constraintInfo.asmRefId = constraint.AssemblyReference?.SelItem?.Id ?? null;
							constraintInfo.asmRefType = constraint.AssemblyReference?.SelItem?.Type?.string?.()?.replace("ITEM_", "") ?? null;
							constraintInfo.compRefId = constraint.ComponentReference?.SelItem?.Id ?? null;
							constraintInfo.compRefType = constraint.ComponentReference?.SelItem?.Type?.string?.()?.replace("ITEM_", "") ?? null;
						}

						constraints.push(constraintInfo);
					}

					if (constraints.length > 0) {
						featureInfos.constraints = constraints;
					}
				} catch (err) {
					console.warn(`Failed to retrieve constraints for feature ${f.Id} :`, err);
				}
			}

			return featureInfos;
		});
	}

	function valueOf(value) {
		if (value) {
			if ('discr' in value) {
				switch (value.discr) {
					case pfcParamValueType.PARAM_STRING: return value.StringValue;
					case pfcParamValueType.PARAM_INTEGER: return value.IntValue;
					case pfcParamValueType.PARAM_BOOLEAN: return value.BoolValue;
					case pfcParamValueType.PARAM_DOUBLE: return value.DoubleValue;
					case pfcParamValueType.PARAM_NOTE: return value.NoteId;
					default: return undefined;
				}
			}
			throw new Error(`${value} is not pfcParameterValue in function 'valueOf'`);
		}
		return value;
	}

	function getModelProps(model) {
		const info = extractObjectProps(model);
		info.ModelType = model.Type?.string?.()?.replace("MDL_", "");
		return info;
	}

	function getMassProps(model) {
		try {
			const massProps = model.GetMassProperty?.();
			if (!massProps) return {};
			return extractObjectProps(massProps);
		} catch (e) {
			console.warn("Mass properties for this model:", e.message);
			return {};
		}
	}

	function getParametersFromModel(model) {
		if (!model.ListParams) return [];

		const params = model.ListParams();
		if (!Array.isArray(params)) return [];

		return params.map(p => ({
			name: p.GetName(),
			type: p.Value.discr.string?.()?.replace("PARAM_", ""),
			value: valueOf(p.Value)
		}));
	}

	function getSelectedItems(session) {
		const result = [];

		try {
			const selections = session.CurrentSelectionBuffer.Contents;

			if (!selections || selections.length === 0) {
				return { error: "No object selected" };
			}

			for (const sel of selections) {
				const entry = {};

				entry.selectionString = sel.SelectionString;

				if (sel.SelItem) {

					entry.selectionType = "item";
					
					const selItem = sel.SelItem;
					entry.itemId = selItem.Id;
					entry.itemName = selItem.GetName();
					entry.itemType = selItem.Type?.string?.()?.replace("ITEM_", "")

				} else if (sel.SelModel) {

					entry.selectionType = "model";

					const selModel = sel.SelModel;
					entry.modelProperties = getModelProps(selModel);
					entry.massProperties = getMassProps(selModel);
					entry.parameters = getParametersFromModel(selModel)

				} else {
					entry.selectionType = "unknown";
				}

				result.push(entry);
			}

			return result;
		} catch (e) {
			return { error: "Error retrieving selection : ", message: e.message };
		}
	}

	if (!model) {
		return { error: "No active model" };
	}

	return {
		modelProps: getModelProps(model),
		massProps: getMassProps(model),
		parameters: getParametersFromModel(model),
		features: getFeaturesFromModel(model),
		selectedItems: getSelectedItems(session)
	};
}