function getModelData() {

	const session = pfcGetCurrentSession();
	const model = session.GetActiveModel();

	let cadModelData = {};

	function getFeatures(model) {
		if (!model) return [];

		return model.ListItems(pfcModelItemType.ITEM_FEATURE).map(f => {
			const isComponent = f.FeatType === pfcFeatureType.FEATTYPE_COMPONENT;
			const rawName = f.GetName?.();
			const hasValidName = rawName != null && rawName !== "no_name";

			const featureInfo = {
				id: f.Id,
				type: f.FeatType.string().substring(9),
				...(hasValidName ? { name: rawName } : {})
			};

			if (isComponent) {
				try {
					const constraintsObj = f.GetConstraints();
					const constraints = [];

					for (let i = 0; i < constraintsObj.length; i++) {
						const constraint = constraintsObj[i];

						constraints.push({
							type: constraint.Type?.string?.() ?? null,
							assemblyReferenceId: constraint.AssemblyReference?.SelItem?.Id ?? null,
							assemblyReferenceType: constraint.AssemblyReference?.SelItem?.Type?.string?.() ?? null,
							componentReferenceId: constraint.ComponentReference?.SelItem?.Id ?? null,
							componentReferenceType: constraint.ComponentReference?.SelItem?.Type?.string?.() ?? null
						});
					}

					if (constraints.length > 0) {
						featureInfo.constraints = constraints;
					}
				} catch (err) {
					console.warn(`Failed to retrieve constraints for feature ${f.Id} :`, err);
				}
			}

			return featureInfo;
		});
	}

	function valueOf(value) {
		if (value) {
			if ('discr' in value) {
				switch (value.discr) {
					case pfcParamValueType.PARAM_STRING: return value.StringValue;
					case pfcParamValueType.PARAM_INTEGER: return value.IntValue;
					case pfcParamValueType.PARAM_BOOLEAN: return value.BoolValue;
					case pfcParamValueType.PARAM_DOUBLE: return value.DoubleValue;
					case pfcParamValueType.PARAM_NOTE: return value.NoteId;
					default: return undefined;
				}
			}
			throw new Error(`${value} is not pfcParameterValue in function 'valueOf'`);
		}
		return value;
	}

	function getModelInfos(model) {
		const modelInfos = {};

		modelInfos['ModelType'] = model.Type.string();

		for (const key in model) {
			if (typeof model[key] !== "function") {
				const value = model[key];
				if (
					value === null ||
					["string", "number", "boolean"].includes(typeof value)
				) {
					modelInfos[key] = value;
				}
			}
		}
		return modelInfos;
	}

	function getMassProperties(model) {
		const result = {};

		try {
			const massProps = model.GetMassProperty?.();
			if (!massProps) return result;

			for (const key in massProps) {
				if (typeof massProps[key] !== 'function') {
					const value = massProps[key];
					if (
						value === null ||
						["string", "number", "boolean"].includes(typeof value)
					) {
						result[key] = value;
					}
				}
			}
		} catch (e) {
			console.warn("Mass properties for this model :", e.message);
		}
		return result;
	}

	function getParametersFromModel(model) {
		if (!model.ListParams) return [];

		const params = model.ListParams();
		if (!Array.isArray(params)) return [];

		return params.map(p => ({
			name: p.GetName(),
			type: p.Value.discr.string().replace("PARAM_", ""),
			value: valueOf(p.Value)
		}));
	}

	function getSelectedItems() {
		const result = [];

		try {
			const session = pfcGetCurrentSession();
			const selections = session.CurrentSelectionBuffer.Contents;

			if (!selections || selections.length === 0) {
				return { error: "No object selected" };
			}

			for (const sel of selections) {
				const entry = {};

				entry.selectionString = sel.SelectionString;

				if (sel.SelItem) {
					const item = sel.SelItem;
					entry.selectionType = "item";
					entry.id = sel.SelItem.Id;
					entry.name = sel.SelItem.GetName();
					entry.type = sel.SelItem.Type.string()

				} else if (sel.SelModel) {
					const model = sel.SelModel;
					entry.selectionType = "model";
					entry.name = sel.SelModel.FullName;
					entry.type = sel.SelModel.Type.string();
				} else {
					entry.selectionType = "unknown";
				}

				result.push(entry);
			}

			return result;
		} catch (e) {
			return { error: "Error retrieving selection : ", message: e.message };
		}
	}

	if (model) {

		cadModelData.general = getModelInfos ? getModelInfos(model) : {};
		cadModelData.massProperties = getMassProperties ? getMassProperties(model) : {};
		cadModelData.features = getFeatures ? getFeatures(model) : {};
		cadModelData.parameters = getParametersFromModel ? getParametersFromModel(model) : {};
		cadModelData.selectedItems = getSelectedItems ? getSelectedItems(model) : {};

	} else {
		cadModelData.error = "No active model";
	}

	return cadModelData;
}